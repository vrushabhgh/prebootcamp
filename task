1)Print odd numbers in an array
let arr=[1,2,3,4,5,6,7,8,9,11,13,14,16,22,34,23];
let oddvar = arr.filter(function(val){
    if(val% 2==1)
    return true;
    
});
console.log(oddvar);

output:--[ 1, 3, 5, 7, 9, 11, 13, 23 ]

2)Sum of all numbers in an array
let arr=[1,2,3,4,5,6,7,8,9,11,13,14,16,22,34,23];
let sum = arr.reduce(function(val1,val2){

    return val1+val2 ;
    
});
console.log(sum);

output:--178

3)Convert all the strings to title caps in a string array

const names = ["ali", "atta", "alex", "john"];

const lowercased = names.map(function(ind) { 
    return ind[0].toUpperCase()+ ind.substr(1).toLowerCase();
    }
);
console.log(lowercased);

output:---[ 'Ali', 'Atta', 'Alex', 'John' ]


4)Remove duplicates from an array
 let arr = [10,20,20,30,30,40,50,50];  
  let  uniqueArray = arr.filter(function(item, pos) {
    return arr.indexOf(item) == pos;
    console.log(uniqueArray);
    output:--[ 10, 20, 30, 40, 50 ]
})


5)Return all the prime numbers in an array

var numArray = [2, 3, 4, 5, 6, 7, 8, 9, 10,11,12,13,14,15,16,17,18,19,20];

let primearray = numArray.filter((number) => {
  for (var i = 2; i <= Math.sqrt(number); i++) {
    if (number % i === 0)
    return false;
  }
  return true;
});

console.log(primearray);

  output:--[ 2, 3, 5, 7, 11, 13, 17, 19 ]
  
  6)The first response that a client receives on an HTTP GET request is often not the fully rendered page.
  Instead, it contains links to additional resources needed by the requested page. 
  The client discovers that the full rendering of the page requires these additional resources from the server only after it downloads the page.
  Because of this, the client will have to make additional requests to retrieve these resources. 
  In HTTP/1.0, the client had to break and remake the TCP connection with every new request, a costly affair in terms of both time and resources.















































